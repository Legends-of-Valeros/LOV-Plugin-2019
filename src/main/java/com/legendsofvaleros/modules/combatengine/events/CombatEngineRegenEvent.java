package com.legendsofvaleros.modules.combatengine.events;

import com.legendsofvaleros.modules.combatengine.api.CombatEntity;
import com.legendsofvaleros.modules.combatengine.stat.RegeneratingStat;
import org.bukkit.entity.LivingEntity;
import org.bukkit.event.Cancellable;
import org.bukkit.event.Event;
import org.bukkit.event.HandlerList;

/**
 * Called when an entity regenerates a stat over time.
 * <p>
 * Not called every time a regenerating stat changes, just when the natural regen-over-time process
 * happens. For example, if a player gained health from a healing spell, this would not be called.
 */
public class CombatEngineRegenEvent extends Event implements Cancellable {

  private static final HandlerList handlers = new HandlerList();

  private final CombatEntity ce;
  private final LivingEntity le;
  private final RegeneratingStat stat;
  private double regenAmount;

  private boolean cancelled;

  /**
   * Class constructor.
   * 
   * @param entity The entity the regeneration is happening for.
   * @param regenerating The stat being regenerated.
   * @param regenAmount The amount the stat is being regenerated by.
   * @throws IllegalArgumentException On a <code>null</code> parameter of an invalidated combat
   *         entity.
   */
  public CombatEngineRegenEvent(CombatEntity entity, RegeneratingStat regenerating,
      double regenAmount) throws IllegalArgumentException {
    if (entity == null) {
      throw new IllegalArgumentException("combat entity cannot be null");
    } else if (regenerating == null) {
      throw new IllegalArgumentException("regenerating stat cannot be null");
    }

    this.ce = entity;
    this.le = entity.getLivingEntity();

    if (le == null) {
      throw new IllegalArgumentException("the entity must still be in memory");
    }

    this.stat = regenerating;
    setRegenerationAmount(regenAmount);
  }

  @Override
  public boolean isCancelled() {
    return cancelled;
  }

  @Override
  public void setCancelled(boolean cancel) {
    cancelled = cancel;
  }

  /**
   * Gets the combat data for the entity whose stat is being regenerated.
   * 
   * @return The combat entity object.
   */
  public CombatEntity getCombatEntity() {
    return ce;
  }

  /**
   * Gets the entity whose stat is being regenerated.
   * 
   * @return The living entity object.
   */
  public LivingEntity getEntity() {
    return le;
  }

  /**
   * Gets the stat that is being regenerated.
   * 
   * @return The type of regeneration that is occurring.
   */
  public RegeneratingStat getRegenerating() {
    return stat;
  }

  /**
   * Gets by how much the stat is being regenerated.
   * 
   * @return The amount of regeneration.
   */
  public double getRegenerationAmount() {
    return regenAmount;
  }

  /**
   * Sets by how much the stat should be regenerated.
   * 
   * @param regenAmount The amount to regenerate the stat by. Cannot be negative.
   */
  public void setRegenerationAmount(double regenAmount) {
    if (regenAmount < 0) {
      regenAmount = 0;
    }
    this.regenAmount = regenAmount;
  }

  @Override
  public HandlerList getHandlers() {
    return handlers;
  }

  public static HandlerList getHandlerList() {
    return handlers;
  }


}
